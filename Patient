import javax.swing.*;
import java.awt.*;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.text.SimpleDateFormat;
import java.time.LocalDate;
import java.time.Period;
import java.util.Date;

public class PatientRegistrationWithDOB {
    public static void main(String[] args) {
        // Create the frame
        JFrame frame = new JFrame("Patient Registration System");
        frame.setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);
        frame.setSize(600, 400);
        frame.setLayout(new BorderLayout());

        // Create the registration panel
        JPanel registrationPanel = new JPanel();
        registrationPanel.setLayout(new GridLayout(7, 2, 10, 10));
        registrationPanel.setBorder(BorderFactory.createTitledBorder("Patient Registration"));

        // Add fields to the registration panel
        JLabel nameLabel = new JLabel("Name:");
        JTextField nameField = new JTextField();

        JLabel dobLabel = new JLabel("Date of Birth:");
        JSpinner dobSpinner = new JSpinner(new SpinnerDateModel());
        JSpinner.DateEditor editor = new JSpinner.DateEditor(dobSpinner, "dd-MM-yyyy");
        dobSpinner.setEditor(editor);

        JLabel addressLabel = new JLabel("Address:");
        JTextField addressField = new JTextField();

        JLabel emailLabel = new JLabel("Email:");
        JTextField emailField = new JTextField();

        JLabel bloodGroupLabel = new JLabel("Blood Group:");
        JComboBox<String> bloodGroupCombo = new JComboBox<>(new String[]{"A+", "A-", "B+", "B-", "AB+", "AB-", "O+", "O-"});

        JLabel phoneLabel = new JLabel("Phone Number:");
        JTextField phoneField = new JTextField();

        JButton registerButton = new JButton("Register");

        // Adding components to the registration panel
        registrationPanel.add(nameLabel);
        registrationPanel.add(nameField);
        registrationPanel.add(dobLabel);
        registrationPanel.add(dobSpinner);
        registrationPanel.add(addressLabel);
        registrationPanel.add(addressField);
        registrationPanel.add(emailLabel);
        registrationPanel.add(emailField);
        registrationPanel.add(bloodGroupLabel);
        registrationPanel.add(bloodGroupCombo);
        registrationPanel.add(phoneLabel);
        registrationPanel.add(phoneField);

        // Empty labels for aligning the register button
        registrationPanel.add(new JLabel());
        registrationPanel.add(registerButton);

        // Add the registration panel to the frame
        frame.add(registrationPanel, BorderLayout.CENTER);

        // Register button action listener
        registerButton.addActionListener(new ActionListener() {
            @Override
            public void actionPerformed(ActionEvent e) {
                try {
                    String name = nameField.getText();
                    Date dob = (Date) dobSpinner.getValue();
                    SimpleDateFormat sdf = new SimpleDateFormat("dd-MM-yyyy");
                    String dobString = sdf.format(dob);
                    int age = calculateAge(dob);

                    String address = addressField.getText();
                    String email = emailField.getText();
                    String bloodGroup = (String) bloodGroupCombo.getSelectedItem();
                    String phone = phoneField.getText();

                    JOptionPane.showMessageDialog(frame, "Patient Registered:\n" +
                            "Name: " + name + "\n" +
                            "Date of Birth: " + dobString + "\n" +
                            "Age: " + age + "\n" +
                            "Address: " + address + "\n" +
                            "Email: " + email + "\n" +
                            "Blood Group: " + bloodGroup + "\n" +
                            "Phone: " + phone);

                    // Show success popup
                    JOptionPane.showMessageDialog(frame, "Registration Successful!");
                } catch (Exception ex) {
                    JOptionPane.showMessageDialog(frame, "Error: " + ex.getMessage());
                }
            }
        });

        // Display the frame
        frame.setVisible(true);
    }

    /**
     * Calculates age based on the given Date of Birth.
     */
    private static int calculateAge(Date dob) {
        LocalDate birthDate = LocalDate.of(
                dob.getYear() + 1900, // Adjust year
                dob.getMonth() + 1,  // Adjust month (0-based)
                dob.getDate()        // Day of the month
        );
        LocalDate currentDate = LocalDate.now();
        return Period.between(birthDate, currentDate).getYears();
    }
}
